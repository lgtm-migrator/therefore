/**
 * Generated by @zefiros/therefore@v0.0.1
 * Do not manually touch this
 */

/* eslint-disable */
import circleSchema from './schemas/circle.schema.json'
import rectangleSchema from './schemas/rectangle.schema.json'
import shapeSchema from './schemas/shape.schema.json'
import squareSchema from './schemas/square.schema.json'

import AjvValidator from 'ajv'

export interface Square {
    size: number
}

export const Square = {
    schema: squareSchema,
    validate: new AjvValidator().compile<Square>(squareSchema),
    is: (o: unknown): o is Square => Square.validate(o) === true,
    assert: (o: unknown): asserts o is Square => {
        if (!Square.validate(o)) {
            throw new AjvValidator.ValidationError(Square.validate.errors ?? [])
        }
    },
}

export interface Rectangle {
    width: number
    height: number
}

export const Rectangle = {
    schema: rectangleSchema,
    validate: new AjvValidator().compile<Rectangle>(rectangleSchema),
    is: (o: unknown): o is Rectangle => Rectangle.validate(o) === true,
    assert: (o: unknown): asserts o is Rectangle => {
        if (!Rectangle.validate(o)) {
            throw new AjvValidator.ValidationError(Rectangle.validate.errors ?? [])
        }
    },
}

export interface Circle {
    radius: number
}

export const Circle = {
    schema: circleSchema,
    validate: new AjvValidator().compile<Circle>(circleSchema),
    is: (o: unknown): o is Circle => Circle.validate(o) === true,
    assert: (o: unknown): asserts o is Circle => {
        if (!Circle.validate(o)) {
            throw new AjvValidator.ValidationError(Circle.validate.errors ?? [])
        }
    },
}

export type Shape = Square | Rectangle | Circle

export const Shape = {
    schema: shapeSchema,
    validate: new AjvValidator().compile<Shape>(shapeSchema),
    is: (o: unknown): o is Shape => Shape.validate(o) === true,
    assert: (o: unknown): asserts o is Shape => {
        if (!Shape.validate(o)) {
            throw new AjvValidator.ValidationError(Shape.validate.errors ?? [])
        }
    },
}
