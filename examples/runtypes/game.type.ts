/**
 * Generated by @zefiros-software/therefore@v0.0.1
 * Do not manually touch this
 */

/* eslint-disable */

import type { ValidateFunction } from 'ajv'

import AjvValidator from 'ajv'

export interface Asteroid {
    type: 'asteroid'
    location: VectorLocal
    mass: number
}

export const Asteroid = {
    validate: require('./schemas/asteroid.schema.js') as ValidateFunction<Asteroid>,
    get schema() {
        return Asteroid.validate.schema
    },
    source: `${__dirname}game.schema`,
    sourceSymbol: 'asteroid',
    is: (o: unknown): o is Asteroid => Asteroid.validate(o) === true,
    assert: (o: unknown): asserts o is Asteroid => {
        if (!Asteroid.validate(o)) {
            throw new AjvValidator.ValidationError(Asteroid.validate.errors ?? [])
        }
    },
} as const

export interface Planet {
    type: 'planet'
    location: VectorLocal
    mass: number
    population: number
    habitable: boolean
}

export const Planet = {
    validate: require('./schemas/planet.schema.js') as ValidateFunction<Planet>,
    get schema() {
        return Planet.validate.schema
    },
    source: `${__dirname}game.schema`,
    sourceSymbol: 'planet',
    is: (o: unknown): o is Planet => Planet.validate(o) === true,
    assert: (o: unknown): asserts o is Planet => {
        if (!Planet.validate(o)) {
            throw new AjvValidator.ValidationError(Planet.validate.errors ?? [])
        }
    },
} as const

export type Rank = 'captain' | 'first mate' | 'officer' | 'ensign'

export const Rank = {
    validate: require('./schemas/rank.schema.js') as ValidateFunction<Rank>,
    get schema() {
        return Rank.validate.schema
    },
    source: `${__dirname}game.schema`,
    sourceSymbol: 'rank',
    is: (o: unknown): o is Rank => Rank.validate(o) === true,
    assert: (o: unknown): asserts o is Rank => {
        if (!Rank.validate(o)) {
            throw new AjvValidator.ValidationError(Rank.validate.errors ?? [])
        }
    },
} as const

export interface CrewMember {
    name: string
    age: number
    rank: Rank
    home: Planet
}

export const CrewMember = {
    validate: require('./schemas/crew-member.schema.js') as ValidateFunction<CrewMember>,
    get schema() {
        return CrewMember.validate.schema
    },
    source: `${__dirname}game.schema`,
    sourceSymbol: 'crewMember',
    is: (o: unknown): o is CrewMember => CrewMember.validate(o) === true,
    assert: (o: unknown): asserts o is CrewMember => {
        if (!CrewMember.validate(o)) {
            throw new AjvValidator.ValidationError(CrewMember.validate.errors ?? [])
        }
    },
} as const

export interface Ship {
    type: 'ship'
    location: VectorLocal
    mass: number
    name: string
    crew: CrewMember[]
}

export const Ship = {
    validate: require('./schemas/ship.schema.js') as ValidateFunction<Ship>,
    get schema() {
        return Ship.validate.schema
    },
    source: `${__dirname}game.schema`,
    sourceSymbol: 'ship',
    is: (o: unknown): o is Ship => Ship.validate(o) === true,
    assert: (o: unknown): asserts o is Ship => {
        if (!Ship.validate(o)) {
            throw new AjvValidator.ValidationError(Ship.validate.errors ?? [])
        }
    },
} as const

export interface Fleet {
    [k: string]: Ship | undefined
}

export const Fleet = {
    validate: require('./schemas/fleet.schema.js') as ValidateFunction<Fleet>,
    get schema() {
        return Fleet.validate.schema
    },
    source: `${__dirname}game.schema`,
    sourceSymbol: 'fleet',
    is: (o: unknown): o is Fleet => Fleet.validate(o) === true,
    assert: (o: unknown): asserts o is Fleet => {
        if (!Fleet.validate(o)) {
            throw new AjvValidator.ValidationError(Fleet.validate.errors ?? [])
        }
    },
} as const

export type SpaceObject = Asteroid | Planet | Ship

export const SpaceObject = {
    validate: require('./schemas/space-object.schema.js') as ValidateFunction<SpaceObject>,
    get schema() {
        return SpaceObject.validate.schema
    },
    source: `${__dirname}game.schema`,
    sourceSymbol: 'spaceObject',
    is: (o: unknown): o is SpaceObject => SpaceObject.validate(o) === true,
    assert: (o: unknown): asserts o is SpaceObject => {
        if (!SpaceObject.validate(o)) {
            throw new AjvValidator.ValidationError(SpaceObject.validate.errors ?? [])
        }
    },
} as const

type VectorLocal = [number, number, number]
