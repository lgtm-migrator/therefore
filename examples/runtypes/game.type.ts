/**
 * Generated by @zefiros/therefore@v0.0.1
 * Do not manually touch this
 */

/* eslint-disable */
import asteroidSchema from './schemas/asteroid.schema.json'
import crewMemberSchema from './schemas/crew-member.schema.json'
import fleetSchema from './schemas/fleet.schema.json'
import planetSchema from './schemas/planet.schema.json'
import shipSchema from './schemas/ship.schema.json'
import spaceObjectSchema from './schemas/space-object.schema.json'

import AjvValidator from 'ajv'

export interface Asteroid {
    type: 'asteroid'
    location: VectorLocal
    mass: number
}

export const Asteroid = {
    schema: asteroidSchema,
    validate: new AjvValidator().compile<Asteroid>(asteroidSchema),
    is: (o: unknown): o is Asteroid => Asteroid.validate(o) === true,
    assert: (o: unknown): asserts o is Asteroid => {
        if (!Asteroid.validate(o)) {
            throw new AjvValidator.ValidationError(Asteroid.validate.errors ?? [])
        }
    },
}

export interface Planet {
    type: 'planet'
    location: VectorLocal
    mass: number
    population: number
    habitable: boolean
}

export const Planet = {
    schema: planetSchema,
    validate: new AjvValidator().compile<Planet>(planetSchema),
    is: (o: unknown): o is Planet => Planet.validate(o) === true,
    assert: (o: unknown): asserts o is Planet => {
        if (!Planet.validate(o)) {
            throw new AjvValidator.ValidationError(Planet.validate.errors ?? [])
        }
    },
}

export type Rank = 'captain' | 'first mate' | 'officer' | 'ensign'

export interface CrewMember {
    name: string
    age: number
    rank: Rank
    home: Planet
}

export const CrewMember = {
    schema: crewMemberSchema,
    validate: new AjvValidator().compile<CrewMember>(crewMemberSchema),
    is: (o: unknown): o is CrewMember => CrewMember.validate(o) === true,
    assert: (o: unknown): asserts o is CrewMember => {
        if (!CrewMember.validate(o)) {
            throw new AjvValidator.ValidationError(CrewMember.validate.errors ?? [])
        }
    },
}

export interface Ship {
    type: 'ship'
    location: VectorLocal
    mass: number
    name: string
    crew: CrewMember[]
}

export const Ship = {
    schema: shipSchema,
    validate: new AjvValidator().compile<Ship>(shipSchema),
    is: (o: unknown): o is Ship => Ship.validate(o) === true,
    assert: (o: unknown): asserts o is Ship => {
        if (!Ship.validate(o)) {
            throw new AjvValidator.ValidationError(Ship.validate.errors ?? [])
        }
    },
}

export interface Fleet {
    [k: string]: Ship | undefined
}

export const Fleet = {
    schema: fleetSchema,
    validate: new AjvValidator().compile<Fleet>(fleetSchema),
    is: (o: unknown): o is Fleet => Fleet.validate(o) === true,
    assert: (o: unknown): asserts o is Fleet => {
        if (!Fleet.validate(o)) {
            throw new AjvValidator.ValidationError(Fleet.validate.errors ?? [])
        }
    },
}

export type SpaceObject = Asteroid | Planet | Ship

export const SpaceObject = {
    schema: spaceObjectSchema,
    validate: new AjvValidator().compile<SpaceObject>(spaceObjectSchema),
    is: (o: unknown): o is SpaceObject => SpaceObject.validate(o) === true,
    assert: (o: unknown): asserts o is SpaceObject => {
        if (!SpaceObject.validate(o)) {
            throw new AjvValidator.ValidationError(SpaceObject.validate.errors ?? [])
        }
    },
}

type VectorLocal = [number, number, number]
