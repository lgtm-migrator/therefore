/**
 * Generated by @zefiros/therefore@v0.0.1
 * Do not manually touch this
 */

/* eslint-disable */
import jsonAdvSchema from './schemas/json-adv.schema.json'
import jsonSchema from './schemas/json.schema.json'

import AjvValidator from 'ajv'

export type Json =
    | string
    | null
    | boolean
    | number
    | {
          [k: string]: Json | undefined
      }
    | Json[]

export const Json = {
    schema: jsonSchema,
    validate:
        typeof jsonSchema === 'function'
            ? jsonSchema
            : (new AjvValidator().compile(jsonSchema) as {
                  (o: unknown | Json): o is Json
                  errors?: null | Array<import('ajv').ErrorObject>
              }),
    is: (o: unknown | Json): o is Json => Json.validate(o) === true,
    assert: (o: unknown | Json): asserts o is Json => {
        if (!Json.validate(o)) {
            throw new AjvValidator.ValidationError(Json.validate.errors ?? [])
        }
    },
}

export type JsonAdv = JsonRefLocal

export const JsonAdv = {
    schema: jsonAdvSchema,
    validate:
        typeof jsonAdvSchema === 'function'
            ? jsonAdvSchema
            : (new AjvValidator().compile(jsonAdvSchema) as {
                  (o: unknown | JsonAdv): o is JsonAdv
                  errors?: null | Array<import('ajv').ErrorObject>
              }),
    is: (o: unknown | JsonAdv): o is JsonAdv => JsonAdv.validate(o) === true,
    assert: (o: unknown | JsonAdv): asserts o is JsonAdv => {
        if (!JsonAdv.validate(o)) {
            throw new AjvValidator.ValidationError(JsonAdv.validate.errors ?? [])
        }
    },
}

type JsonRefLocal =
    | string
    | null
    | boolean
    | number
    | {
          [k: string]: JsonAdv | undefined
      }
    | JsonAdv[]
