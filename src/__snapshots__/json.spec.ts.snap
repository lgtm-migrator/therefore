// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`json 1`] = `
Array [
  Object {
    "data": Object {
      "00010-000": "JsonAdv",
      "00019-000": "JsonRefLocal",
      "0009-000": "Json",
    },
    "file": "examples/json/json.schema.type.ts",
    "prettify": true,
    "relativeSource": "./json.schema",
    "template": "/**
 * Generated by @zefiros-software/therefore@v0.0.1
 * Do not manually touch this
 */

/* eslint-disable */

import type { ValidateFunction } from 'ajv'


import AjvValidator from 'ajv'

export type Json = string | null | boolean | number | {
    [k: string]: ( {{0009-000}} ) | undefined
} | ({{0009-000}})[]

export const Json = {
    validate: require('./schemas/json.schema.js') as ValidateFunction<Json>,
    get schema() { return Json.validate.schema},
    source: \`\${__dirname}json.schema\`,
    sourceSymbol: 'json',
    is: (o: unknown): o is Json => Json.validate(o) === true,
    assert: (o: unknown): asserts o is Json => {
        if (!Json.validate(o)) {
            throw new AjvValidator.ValidationError(Json.validate.errors ?? [])
        }
    },
} as const

export type JsonAdv = {{00019-000}}

export const JsonAdv = {
    validate: require('./schemas/json-adv.schema.js') as ValidateFunction<JsonAdv>,
    get schema() { return JsonAdv.validate.schema},
    source: \`\${__dirname}json.schema\`,
    sourceSymbol: 'jsonAdv',
    is: (o: unknown): o is JsonAdv => JsonAdv.validate(o) === true,
    assert: (o: unknown): asserts o is JsonAdv => {
        if (!JsonAdv.validate(o)) {
            throw new AjvValidator.ValidationError(JsonAdv.validate.errors ?? [])
        }
    },
} as const

type JsonRefLocal = string | null | boolean | number | {
    [k: string]: ( {{00010-000}} ) | undefined
} | ({{00010-000}})[]
",
    "type": "typescript",
  },
  Object {
    "data": Object {
      "00010-000": "JsonAdv",
      "00019-000": "JsonRefLocal",
      "0009-000": "Json",
    },
    "file": "examples/json/schemas/json.schema.json",
    "prettify": true,
    "relativeSource": "./json.schema",
    "template": "{
  \\"$schema\\": \\"http://json-schema.org/draft-07/schema#\\",
  \\"oneOf\\": [
    {
      \\"type\\": \\"string\\"
    },
    {
      \\"type\\": \\"null\\"
    },
    {
      \\"type\\": \\"boolean\\"
    },
    {
      \\"type\\": \\"number\\"
    },
    {
      \\"type\\": \\"object\\",
      \\"additionalProperties\\": {
        \\"$ref\\": \\"#\\"
      }
    },
    {
      \\"type\\": \\"array\\",
      \\"items\\": {
        \\"$ref\\": \\"#\\"
      }
    }
  ]
}",
    "type": "jsonschema",
  },
  Object {
    "data": Object {
      "00010-000": "JsonAdv",
      "00019-000": "JsonRefLocal",
      "0009-000": "Json",
    },
    "file": "examples/json/schemas/json-adv.schema.json",
    "prettify": true,
    "relativeSource": "./json.schema",
    "template": "{
  \\"$schema\\": \\"http://json-schema.org/draft-07/schema#\\",
  \\"$ref\\": \\"#/definitions/{{00019-000}}\\",
  \\"definitions\\": {
    \\"{{00019-000}}\\": {
      \\"oneOf\\": [
        {
          \\"type\\": \\"string\\"
        },
        {
          \\"type\\": \\"null\\"
        },
        {
          \\"type\\": \\"boolean\\"
        },
        {
          \\"type\\": \\"number\\"
        },
        {
          \\"type\\": \\"object\\",
          \\"additionalProperties\\": {
            \\"$ref\\": \\"#\\"
          }
        },
        {
          \\"type\\": \\"array\\",
          \\"items\\": {
            \\"$ref\\": \\"#\\"
          }
        }
      ]
    }
  }
}",
    "type": "jsonschema",
  },
]
`;

exports[`simple 1`] = `
Array [
  Object {
    "data": Object {
      "0004-000": "Simple",
    },
    "file": "examples/json/simple.schema.type.ts",
    "prettify": true,
    "relativeSource": "./simple.schema",
    "template": "/**
 * Generated by @zefiros-software/therefore@v0.0.1
 * Do not manually touch this
 */

/* eslint-disable */

import type { ValidateFunction } from 'ajv'


import AjvValidator from 'ajv'

export type Simple = number | ({{0004-000}})[]

export const Simple = {
    validate: require('./schemas/simple.schema.js') as ValidateFunction<Simple>,
    get schema() { return Simple.validate.schema},
    source: \`\${__dirname}simple.schema\`,
    sourceSymbol: 'simple',
    is: (o: unknown): o is Simple => Simple.validate(o) === true,
    assert: (o: unknown): asserts o is Simple => {
        if (!Simple.validate(o)) {
            throw new AjvValidator.ValidationError(Simple.validate.errors ?? [])
        }
    },
} as const
",
    "type": "typescript",
  },
  Object {
    "data": Object {
      "0004-000": "Simple",
    },
    "file": "examples/json/schemas/simple.schema.json",
    "prettify": true,
    "relativeSource": "./simple.schema",
    "template": "{
  \\"$schema\\": \\"http://json-schema.org/draft-07/schema#\\",
  \\"oneOf\\": [
    {
      \\"type\\": \\"number\\"
    },
    {
      \\"type\\": \\"array\\",
      \\"items\\": {
        \\"$ref\\": \\"#\\"
      }
    }
  ]
}",
    "type": "jsonschema",
  },
]
`;
