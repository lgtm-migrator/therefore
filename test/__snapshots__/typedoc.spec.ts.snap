// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`schema typedoc 1`] = `
Array [
  Object {
    "data": Object {
      "00010-000": "SrcLocal",
      "00013-000": "ThemeLocal",
      "0003-000": "PluginLocal",
      "0006-000": "ReadmeLocal",
    },
    "file": "examples/typedoc/typedoc.schema.type.ts",
    "prettify": true,
    "relativeSource": "./typedoc.schema",
    "template": "/**
 * Generated by @zefiros-software/therefore@v0.0.1
 * Do not manually touch this
 */

/* eslint-disable */

import type { ValidateFunction } from 'ajv'


import AjvValidator from 'ajv'

/**
 * JSON Schema for typedoc.json
 */
export interface Typedoc {
    /**
     * Should TypeDoc disable the testing and cleaning of the output directory?
     * 
     * @default false
     */
    disableOutputCheck: boolean
    /**
     * Specifies the fully qualified name of the root symbol.
     * 
     * @default './'
     */
    entryPoint: string
    /**
     * Exclude files by the given pattern when a path is provided as source. Supports minimatch patterns.
     */
    exclude: (string)[]
    /**
     * Prevent externally resolved TypeScript files from being documented.
     * 
     * @default false
     */
    excludeExternals: boolean
    /**
     * Prevent symbols that are not exported from being documented.
     * 
     * @default false
     */
    excludeNotExported: boolean
    /**
     * Ignores private variables and methods
     * 
     * @default false
     */
    excludePrivate: boolean
    /**
     * Ignores protected variables and methods
     * 
     * @default false
     */
    excludeProtected: boolean
    /**
     * Define a pattern for files that should be considered being external.
     */
    externalPattern: (string)[]
    /**
     * Set the Google Analytics tracking ID and activate tracking code.
     */
    gaID: string
    /**
     * Set the site name for Google Analytics.
     * 
     * @default 'auto'
     */
    gaSite: string
    /**
     * Use specified revision or branch instead of the last revision for linking to GitHub source files.
     */
    gitRevision: string
    /**
     * Do not print the TypeDoc link at the end of the page.
     * 
     * @default false
     */
    hideGenerator: boolean
    /**
     * Generates documentation, even if the project does not TypeScript compile.
     * 
     * @default false
     */
    ignoreCompilerErrors: boolean
    /**
     * Turn on parsing of .d.ts declaration files.
     * 
     * @default false
     */
    includeDeclarations: boolean
    /**
     * Specifies the location to look for included documents (use [[include:FILENAME]] in comments).
     */
    includes: string
    /**
     * The sources files from which to build documentation.
     */
    inputFiles: (string)[]
    /**
     * Specifies the location to output a JSON file containing all of the reflection data.
     */
    json: string
    /**
     * Emits a list of broken symbol [[navigation]] links after documentation generation
     * 
     * @default false
     */
    listInvalidSymbolLinks: boolean
    /**
     * Specify the logger that should be used.
     * 
     * @default 'console'
     */
    logger: 'console' | 'none'
    /**
     * Specifies the location with media files that should be copied to the output directory.
     */
    media: string
    /**
     * Specifies the output mode the project is used to be compiled with.
     * 
     * @default 'modules'
     */
    mode: 'file' | 'modules'
    /**
     * Set the name of the project that will be used in the header of the template.
     */
    name: string
    /**
     * Specifies the location the documentation should be written to.
     */
    out: string
    plugin: {{0003-000}}
    /**
     * Add the package version according to package.json to the projects name.
     * 
     * @default false
     */
    includeVersion: boolean
    /**
     * Specify tags that should be removed from doc comments when parsing.
     * 
     * @default []
     */
    excludeTags: (string)[]
    readme: {{0006-000}}
    src: {{00010-000}}
    /**
     * Remove reflections annotated with @internal
     * 
     * @default false
     */
    stripInternal: boolean
    theme: {{00013-000}}
    /**
     * Specifies the top level table of contents.
     */
    toc: (string)[]
    /**
     * Specify a typescript config file that should be loaded. If not specified TypeDoc will look for 'tsconfig.json' in the current directory.
     * 
     * @default './tsconfig.json'
     */
    tsconfig: string
}

export const Typedoc = {
    validate: require('./schemas/typedoc.schema.js') as ValidateFunction<Typedoc>,
    get schema() { return Typedoc.validate.schema},
    source: \`\${__dirname}typedoc.schema\`,
    sourceSymbol: 'typedoc',
    is: (o: unknown): o is Typedoc => Typedoc.validate(o) === true,
    assert: (o: unknown): asserts o is Typedoc => {
        if (!Typedoc.validate(o)) {
            throw new AjvValidator.ValidationError(Typedoc.validate.errors ?? [])
        }
    },
} as const

/**
 * Specify the npm plugins that should be loaded. Omit to load all installed plugins.
 */
type PluginLocal = (string)[]

/**
 * Path to the readme file that should be displayed on the index page. Pass none to disable the index page and start the documentation on the globals page.
 */
type ReadmeLocal = 'none' | string

/**
 * The sources files from which to build documentation.
 * DEPRECATED: Use inputFiles instead.
 */
type SrcLocal = string | (string)[]

/**
 * Specify the path to the theme that should be used.
 */
type ThemeLocal = 'default' | 'minimal' | string
",
    "type": "typescript",
  },
  Object {
    "data": Object {
      "00010-000": "SrcLocal",
      "00013-000": "ThemeLocal",
      "0003-000": "PluginLocal",
      "0006-000": "ReadmeLocal",
    },
    "file": "examples/typedoc/schemas/typedoc.schema.json",
    "prettify": true,
    "relativeSource": "./typedoc.schema",
    "template": "{
  \\"$schema\\": \\"http://json-schema.org/draft-07/schema#\\",
  \\"type\\": \\"object\\",
  \\"title\\": \\"JSON Schema for typedoc.json\\",
  \\"properties\\": {
    \\"disableOutputCheck\\": {
      \\"type\\": \\"boolean\\",
      \\"description\\": \\"Should TypeDoc disable the testing and cleaning of the output directory?\\",
      \\"default\\": false
    },
    \\"entryPoint\\": {
      \\"type\\": \\"string\\",
      \\"description\\": \\"Specifies the fully qualified name of the root symbol.\\",
      \\"default\\": \\"./\\"
    },
    \\"exclude\\": {
      \\"type\\": \\"array\\",
      \\"description\\": \\"Exclude files by the given pattern when a path is provided as source. Supports minimatch patterns.\\",
      \\"items\\": {
        \\"type\\": \\"string\\"
      }
    },
    \\"excludeExternals\\": {
      \\"type\\": \\"boolean\\",
      \\"description\\": \\"Prevent externally resolved TypeScript files from being documented.\\",
      \\"default\\": false
    },
    \\"excludeNotExported\\": {
      \\"type\\": \\"boolean\\",
      \\"description\\": \\"Prevent symbols that are not exported from being documented.\\",
      \\"default\\": false
    },
    \\"excludePrivate\\": {
      \\"type\\": \\"boolean\\",
      \\"description\\": \\"Ignores private variables and methods\\",
      \\"default\\": false
    },
    \\"excludeProtected\\": {
      \\"type\\": \\"boolean\\",
      \\"description\\": \\"Ignores protected variables and methods\\",
      \\"default\\": false
    },
    \\"externalPattern\\": {
      \\"type\\": \\"array\\",
      \\"description\\": \\"Define a pattern for files that should be considered being external.\\",
      \\"items\\": {
        \\"type\\": \\"string\\"
      }
    },
    \\"gaID\\": {
      \\"type\\": \\"string\\",
      \\"description\\": \\"Set the Google Analytics tracking ID and activate tracking code.\\"
    },
    \\"gaSite\\": {
      \\"type\\": \\"string\\",
      \\"description\\": \\"Set the site name for Google Analytics.\\",
      \\"default\\": \\"auto\\"
    },
    \\"gitRevision\\": {
      \\"type\\": \\"string\\",
      \\"description\\": \\"Use specified revision or branch instead of the last revision for linking to GitHub source files.\\"
    },
    \\"hideGenerator\\": {
      \\"type\\": \\"boolean\\",
      \\"description\\": \\"Do not print the TypeDoc link at the end of the page.\\",
      \\"default\\": false
    },
    \\"ignoreCompilerErrors\\": {
      \\"type\\": \\"boolean\\",
      \\"description\\": \\"Generates documentation, even if the project does not TypeScript compile.\\",
      \\"default\\": false
    },
    \\"includeDeclarations\\": {
      \\"type\\": \\"boolean\\",
      \\"description\\": \\"Turn on parsing of .d.ts declaration files.\\",
      \\"default\\": false
    },
    \\"includes\\": {
      \\"type\\": \\"string\\",
      \\"description\\": \\"Specifies the location to look for included documents (use [[include:FILENAME]] in comments).\\"
    },
    \\"inputFiles\\": {
      \\"type\\": \\"array\\",
      \\"description\\": \\"The sources files from which to build documentation.\\",
      \\"items\\": {
        \\"type\\": \\"string\\"
      }
    },
    \\"json\\": {
      \\"type\\": \\"string\\",
      \\"description\\": \\"Specifies the location to output a JSON file containing all of the reflection data.\\"
    },
    \\"listInvalidSymbolLinks\\": {
      \\"type\\": \\"boolean\\",
      \\"description\\": \\"Emits a list of broken symbol [[navigation]] links after documentation generation\\",
      \\"default\\": false
    },
    \\"logger\\": {
      \\"description\\": \\"Specify the logger that should be used.\\",
      \\"default\\": \\"console\\",
      \\"enum\\": [
        \\"console\\",
        \\"none\\"
      ]
    },
    \\"media\\": {
      \\"type\\": \\"string\\",
      \\"description\\": \\"Specifies the location with media files that should be copied to the output directory.\\"
    },
    \\"mode\\": {
      \\"description\\": \\"Specifies the output mode the project is used to be compiled with.\\",
      \\"default\\": \\"modules\\",
      \\"enum\\": [
        \\"file\\",
        \\"modules\\"
      ]
    },
    \\"name\\": {
      \\"type\\": \\"string\\",
      \\"description\\": \\"Set the name of the project that will be used in the header of the template.\\"
    },
    \\"out\\": {
      \\"type\\": \\"string\\",
      \\"description\\": \\"Specifies the location the documentation should be written to.\\"
    },
    \\"plugin\\": {
      \\"$ref\\": \\"#/definitions/{{0003-000}}\\"
    },
    \\"includeVersion\\": {
      \\"type\\": \\"boolean\\",
      \\"description\\": \\"Add the package version according to package.json to the projects name.\\",
      \\"default\\": false
    },
    \\"excludeTags\\": {
      \\"type\\": \\"array\\",
      \\"description\\": \\"Specify tags that should be removed from doc comments when parsing.\\",
      \\"default\\": [],
      \\"items\\": {
        \\"type\\": \\"string\\"
      }
    },
    \\"readme\\": {
      \\"$ref\\": \\"#/definitions/{{0006-000}}\\"
    },
    \\"src\\": {
      \\"$ref\\": \\"#/definitions/{{00010-000}}\\"
    },
    \\"stripInternal\\": {
      \\"type\\": \\"boolean\\",
      \\"description\\": \\"Remove reflections annotated with @internal\\",
      \\"default\\": false
    },
    \\"theme\\": {
      \\"$ref\\": \\"#/definitions/{{00013-000}}\\"
    },
    \\"toc\\": {
      \\"type\\": \\"array\\",
      \\"description\\": \\"Specifies the top level table of contents.\\",
      \\"items\\": {
        \\"type\\": \\"string\\"
      }
    },
    \\"tsconfig\\": {
      \\"type\\": \\"string\\",
      \\"description\\": \\"Specify a typescript config file that should be loaded. If not specified TypeDoc will look for 'tsconfig.json' in the current directory.\\",
      \\"default\\": \\"./tsconfig.json\\"
    }
  },
  \\"required\\": [
    \\"disableOutputCheck\\",
    \\"entryPoint\\",
    \\"exclude\\",
    \\"excludeExternals\\",
    \\"excludeNotExported\\",
    \\"excludePrivate\\",
    \\"excludeProtected\\",
    \\"externalPattern\\",
    \\"gaID\\",
    \\"gaSite\\",
    \\"gitRevision\\",
    \\"hideGenerator\\",
    \\"ignoreCompilerErrors\\",
    \\"includeDeclarations\\",
    \\"includes\\",
    \\"inputFiles\\",
    \\"json\\",
    \\"listInvalidSymbolLinks\\",
    \\"logger\\",
    \\"media\\",
    \\"mode\\",
    \\"name\\",
    \\"out\\",
    \\"plugin\\",
    \\"includeVersion\\",
    \\"excludeTags\\",
    \\"readme\\",
    \\"src\\",
    \\"stripInternal\\",
    \\"theme\\",
    \\"toc\\",
    \\"tsconfig\\"
  ],
  \\"additionalProperties\\": false,
  \\"definitions\\": {
    \\"{{0003-000}}\\": {
      \\"title\\": \\"plugin\\",
      \\"description\\": \\"Specify the npm plugins that should be loaded. Omit to load all installed plugins.\\",
      \\"oneOf\\": [
        {
          \\"type\\": \\"array\\",
          \\"default\\": [
            \\"none\\"
          ],
          \\"items\\": {
            \\"type\\": \\"string\\"
          }
        }
      ]
    },
    \\"{{0006-000}}\\": {
      \\"title\\": \\"readme\\",
      \\"description\\": \\"Path to the readme file that should be displayed on the index page. Pass none to disable the index page and start the documentation on the globals page.\\",
      \\"oneOf\\": [
        {
          \\"const\\": \\"none\\"
        },
        {
          \\"type\\": \\"string\\"
        }
      ]
    },
    \\"{{00010-000}}\\": {
      \\"title\\": \\"src\\",
      \\"description\\": \\"The sources files from which to build documentation.\\\\nDEPRECATED: Use inputFiles instead.\\",
      \\"oneOf\\": [
        {
          \\"type\\": \\"string\\"
        },
        {
          \\"type\\": \\"array\\",
          \\"items\\": {
            \\"type\\": \\"string\\"
          }
        }
      ]
    },
    \\"{{00013-000}}\\": {
      \\"title\\": \\"theme\\",
      \\"description\\": \\"Specify the path to the theme that should be used.\\",
      \\"oneOf\\": [
        {
          \\"enum\\": [
            \\"default\\",
            \\"minimal\\"
          ]
        },
        {
          \\"type\\": \\"string\\"
        }
      ]
    }
  }
}",
    "type": "jsonschema",
  },
]
`;
