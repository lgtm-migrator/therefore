// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`schema json 1`] = `
Array [
  Object {
    "data": Object {
      "00010-000": "JsonAdv",
      "00019-000": "JsonRefLocal",
      "0009-000": "Json",
    },
    "file": "examples\\\\json\\\\json.type.ts",
    "template": "/**
 * Generated by @zefiros/therefore@v0.0.1
 * Do not manually touch this
 */

/* eslint-disable */
import jsonAdvSchema from './schemas/json-adv.schema.json'
import jsonSchema from './schemas/json.schema.json'

import AjvValidator from 'ajv'

export type Json = string | null | boolean | number | {
    [k: string]: ( {{0009-000}} ) | undefined
} | ({{0009-000}})[]

export const Json = {
    schema: jsonSchema,
    validate: typeof jsonSchema === 'function' ? jsonSchema : new AjvValidator().compile(jsonSchema) as {(o: unknown | Json): o is Json;  errors?: null | Array<import(\\"ajv\\").ErrorObject>},
    is: (o: unknown): o is Json => Json.validate(o) === true,
    assert: (o: unknown): asserts o is Json => {
        if (!Json.validate(o)) {
            throw new AjvValidator.ValidationError(Json.validate.errors ?? [])
        }
    },
}


export type JsonAdv = {{00019-000}}

export const JsonAdv = {
    schema: jsonAdvSchema,
    validate: typeof jsonAdvSchema === 'function' ? jsonAdvSchema : new AjvValidator().compile(jsonAdvSchema) as {(o: unknown | JsonAdv): o is JsonAdv;  errors?: null | Array<import(\\"ajv\\").ErrorObject>},
    is: (o: unknown): o is JsonAdv => JsonAdv.validate(o) === true,
    assert: (o: unknown): asserts o is JsonAdv => {
        if (!JsonAdv.validate(o)) {
            throw new AjvValidator.ValidationError(JsonAdv.validate.errors ?? [])
        }
    },
}


type JsonRefLocal = string | null | boolean | number | {
    [k: string]: ( {{00010-000}} ) | undefined
} | ({{00010-000}})[]
",
    "type": "typescript",
  },
  Object {
    "data": Object {
      "00010-000": "JsonAdv",
      "00019-000": "JsonRefLocal",
      "0009-000": "Json",
    },
    "file": "examples\\\\json\\\\schemas\\\\json.schema.json",
    "template": "{
  \\"$schema\\": \\"http://json-schema.org/draft-07/schema#\\",
  \\"oneOf\\": [
    {
      \\"type\\": \\"string\\"
    },
    {
      \\"type\\": \\"null\\"
    },
    {
      \\"type\\": \\"boolean\\"
    },
    {
      \\"type\\": \\"number\\"
    },
    {
      \\"type\\": \\"object\\",
      \\"additionalProperties\\": {
        \\"$ref\\": \\"#\\"
      }
    },
    {
      \\"type\\": \\"array\\",
      \\"items\\": {
        \\"$ref\\": \\"#\\"
      }
    }
  ]
}",
    "type": "jsonschema",
  },
  Object {
    "data": Object {
      "00010-000": "JsonAdv",
      "00019-000": "JsonRefLocal",
      "0009-000": "Json",
    },
    "file": "examples\\\\json\\\\schemas\\\\json-adv.schema.json",
    "template": "{
  \\"$schema\\": \\"http://json-schema.org/draft-07/schema#\\",
  \\"$ref\\": \\"#/definitions/{{00019-000}}\\",
  \\"definitions\\": {
    \\"{{00019-000}}\\": {
      \\"oneOf\\": [
        {
          \\"type\\": \\"string\\"
        },
        {
          \\"type\\": \\"null\\"
        },
        {
          \\"type\\": \\"boolean\\"
        },
        {
          \\"type\\": \\"number\\"
        },
        {
          \\"type\\": \\"object\\",
          \\"additionalProperties\\": {
            \\"$ref\\": \\"#\\"
          }
        },
        {
          \\"type\\": \\"array\\",
          \\"items\\": {
            \\"$ref\\": \\"#\\"
          }
        }
      ]
    }
  }
}",
    "type": "jsonschema",
  },
]
`;

exports[`schema simple 1`] = `
Array [
  Object {
    "data": Object {
      "0004-000": "Simple",
    },
    "file": "examples\\\\json\\\\simple.type.ts",
    "template": "/**
 * Generated by @zefiros/therefore@v0.0.1
 * Do not manually touch this
 */

/* eslint-disable */
import simpleSchema from './schemas/simple.schema.json'

import AjvValidator from 'ajv'

export type Simple = number | ({{0004-000}})[]

export const Simple = {
    schema: simpleSchema,
    validate: typeof simpleSchema === 'function' ? simpleSchema : new AjvValidator().compile(simpleSchema) as {(o: unknown | Simple): o is Simple;  errors?: null | Array<import(\\"ajv\\").ErrorObject>},
    is: (o: unknown): o is Simple => Simple.validate(o) === true,
    assert: (o: unknown): asserts o is Simple => {
        if (!Simple.validate(o)) {
            throw new AjvValidator.ValidationError(Simple.validate.errors ?? [])
        }
    },
}

",
    "type": "typescript",
  },
  Object {
    "data": Object {
      "0004-000": "Simple",
    },
    "file": "examples\\\\json\\\\schemas\\\\simple.schema.json",
    "template": "{
  \\"$schema\\": \\"http://json-schema.org/draft-07/schema#\\",
  \\"oneOf\\": [
    {
      \\"type\\": \\"number\\"
    },
    {
      \\"type\\": \\"array\\",
      \\"items\\": {
        \\"$ref\\": \\"#\\"
      }
    }
  ]
}",
    "type": "jsonschema",
  },
]
`;
